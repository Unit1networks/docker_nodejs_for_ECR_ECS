# This is a basic workflow to help you get started with Actions

name: Deploy to ECR & ECS

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_nodejs_demo
        IMAGE_TAG: nodejs_demo_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      
    - name: Deploy Staging
      env:
        REGISTRY: ${{ steps.login-ecr-staging.outputs.registry }}
        REPOSITORY: docker_nodejs_demo
        IMAGE_TAG: ${{ steps.varsstaging.outputs.sha_short }}
      run: |
        pip3 install awscli
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition docker_nodejs_demo --region eu-west-2)
        NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REGISTRY/$REPOSITORY:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
        echo "Registering new container definition..."
        aws ecs register-task-definition --region eu-west-2 --family docker_nodejs_demo --container-definitions "${NEW_CONTAINER_DEFINITION}" --execution-role-arn  "arn:aws:iam::117523087655:role/ecsTaskExecutionRole" --cpu "0.50 vCPU" --memory "1GB" --network-mode "awsvpc" --requires-compatibilities "FARGATE"
        echo "Updating the service..."
        aws ecs update-service --region eu-west-2 --cluster fifthpro-staging --service fantasy-service-staging  --task-definition docker_nodejs_demo --desired-count "1"    